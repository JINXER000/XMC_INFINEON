<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\test222.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\test222.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Tue Jul 31 14:01:55 2018
<BR><P>
<H3>Maximum Stack Usage =        856 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Sls10ere_authenticate &rArr; ECDSA_verify &rArr; ecc_mul_projective &rArr; mont_ecc_mul &rArr; mont_ecc_add
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">BusFault_Handler</a><BR>
 <LI><a href="#[143]">Dps310::configTemp(unsigned char, unsigned char)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[143]">Dps310::configTemp(unsigned char, unsigned char)</a><BR>
 <LI><a href="#[155]">Dps310::configPressure(unsigned char, unsigned char)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[155]">Dps310::configPressure(unsigned char, unsigned char)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9]">BusFault_Handler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[53]">CAN0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[54]">CAN0_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[55]">CAN0_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[56]">CAN0_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[57]">CAN0_4_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[58]">CAN0_5_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[59]">CAN0_6_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[5a]">CAN0_7_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[37]">CCU40_0_IRQHandler</a> from timer.o(i.CCU40_0_IRQHandler) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[38]">CCU40_1_IRQHandler</a> from timer.o(i.CCU40_1_IRQHandler) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[39]">CCU40_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[3a]">CCU40_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[3b]">CCU41_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[3c]">CCU41_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[3d]">CCU41_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[3e]">CCU41_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[3f]">CCU42_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[40]">CCU42_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[41]">CCU42_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[42]">CCU42_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[43]">CCU43_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[44]">CCU43_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[45]">CCU43_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[46]">CCU43_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[47]">CCU80_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[48]">CCU80_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[49]">CCU80_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[4a]">CCU80_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[4b]">CCU81_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[4c]">CCU81_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[4d]">CCU81_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[4e]">CCU81_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[35]">DAC0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[36]">DAC0_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[2d]">DSD0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[2e]">DSD0_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[2f]">DSD0_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[30]">DSD0_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[31]">DSD0_4_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[32]">DSD0_5_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[33]">DSD0_6_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[34]">DSD0_7_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[10]">ERU0_0_IRQHandler</a> from pin_interrupt.o(i.ERU0_0_IRQHandler) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[11]">ERU0_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[12]">ERU0_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[13]">ERU0_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[14]">ERU1_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[15]">ERU1_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[16]">ERU1_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[17]">ERU1_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[72]">ETH0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[6e]">FCE0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[6f]">GPDMA0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[73]">GPDMA1_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[6d]">LEDTS0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[8]">MemManage_Handler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[18]">PMU0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[4f]">POSIF0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[50]">POSIF0_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[51]">POSIF1_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[52]">POSIF1_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[f]">SCU_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[70]">SDMMC0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[7b]">Sls10ere_authenticate</a> from sls10ere_crypto.o(i.Sls10ere_authenticate) referenced from sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
 <LI><a href="#[79]">Sls10ere_generate_challenge</a> from sls10ere_crypto.o(i.Sls10ere_generate_challenge) referenced from sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
 <LI><a href="#[7a]">Sls10ere_generate_checkvalue</a> from sls10ere_crypto.o(i.Sls10ere_generate_checkvalue) referenced from sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
 <LI><a href="#[78]">Sls10ere_initialize_crypto</a> from sls10ere_crypto.o(i.Sls10ere_initialize_crypto) referenced from sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
 <LI><a href="#[7c]">Sls10ere_mac_verify</a> from sls10ere_crypto.o(i.Sls10ere_mac_verify) referenced from sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
 <LI><a href="#[77]">Sls10ere_unregister</a> from sls10ere_crypto.o(i.Sls10ere_unregister) referenced from sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
 <LI><a href="#[e]">SysTick_Handler</a> from timer.o(i.SysTick_Handler) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[75]">SystemInit</a> from system_xmc4700.o(i.SystemInit) referenced from startup_xmc4700.o(.text)
 <LI><a href="#[71]">USB0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[5b]">USIC0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[5c]">USIC0_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[5d]">USIC0_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[5e]">USIC0_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[5f]">USIC0_4_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[60]">USIC0_5_IRQHandler</a> from receive.o(i.USIC0_5_IRQHandler) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[61]">USIC1_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[62]">USIC1_1_IRQHandler</a> from wire.o(i.USIC1_1_IRQHandler) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[63]">USIC1_2_IRQHandler</a> from wire.o(i.USIC1_2_IRQHandler) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[64]">USIC1_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[65]">USIC1_4_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[66]">USIC1_5_IRQHandler</a> from receive.o(i.USIC1_5_IRQHandler) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[67]">USIC2_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[68]">USIC2_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[69]">USIC2_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[6a]">USIC2_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[6b]">USIC2_4_IRQHandler</a> from receive.o(i.USIC2_4_IRQHandler) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[6c]">USIC2_5_IRQHandler</a> from receive.o(i.USIC2_5_IRQHandler) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[a]">UsageFault_Handler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[19]">VADC0_C0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[1a]">VADC0_C0_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[1b]">VADC0_C0_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[1c]">VADC0_C0_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[1d]">VADC0_G0_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[1e]">VADC0_G0_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[1f]">VADC0_G0_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[20]">VADC0_G0_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[21]">VADC0_G1_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[22]">VADC0_G1_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[23]">VADC0_G1_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[24]">VADC0_G1_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[25]">VADC0_G2_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[26]">VADC0_G2_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[27]">VADC0_G2_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[28]">VADC0_G2_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[29]">VADC0_G3_0_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[2a]">VADC0_G3_1_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[2b]">VADC0_G3_2_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[2c]">VADC0_G3_3_IRQHandler</a> from startup_xmc4700.o(.text) referenced from startup_xmc4700.o(RESET)
 <LI><a href="#[7e]">Dps310::~Dps310()</a> from dps310.o(i._ZN6Dps310D1Ev) referenced from main.o(i.__sti___8_Main_cpp_66946e4d)
 <LI><a href="#[8c]">TwoWire::read()</a> from wire.o(i._ZN7TwoWire4readEv) referenced from wire.o(.constdata__ZTV7TwoWire)
 <LI><a href="#[8d]">TwoWire::flush()</a> from wire.o(i._ZN7TwoWire5flushEv) referenced from wire.o(.constdata__ZTV7TwoWire)
 <LI><a href="#[8b]">TwoWire::write(unsigned char)</a> from wire.o(i._ZN7TwoWire5writeEh) referenced from wire.o(.constdata__ZTV7TwoWire)
 <LI><a href="#[76]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_xmc4700.o(.text)
 <LI><a href="#[91]">__sti___10_HW_SPI_cpp_SPI</a> from hw_spi.o(i.__sti___10_HW_SPI_cpp_SPI) referenced from hw_spi.o(.init_array)
 <LI><a href="#[8f]">__sti___11_Receive_cpp_66f2438e</a> from receive.o(i.__sti___11_Receive_cpp_66f2438e) referenced from receive.o(.init_array)
 <LI><a href="#[8e]">__sti___8_Main_cpp_66946e4d</a> from main.o(i.__sti___8_Main_cpp_66946e4d) referenced from main.o(.init_array)
 <LI><a href="#[90]">__sti___8_Wire_cpp_1426899b</a> from wire.o(i.__sti___8_Wire_cpp_1426899b) referenced from wire.o(.init_array)
 <LI><a href="#[82]">dwordvec_163_copy</a> from sls10ere_math.o(i.dwordvec_163_copy) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[88]">dwordvec_193_copy</a> from sls10ere_math.o(i.dwordvec_193_copy) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[7f]">dwordvec_l_shift_163</a> from sls10ere_math.o(i.dwordvec_l_shift_163) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[85]">dwordvec_l_shift_193</a> from sls10ere_math.o(i.dwordvec_l_shift_193) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[7d]">fputc</a> from cppforxmc4700.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[83]">gf2_163_add</a> from sls10ere_math.o(i.gf2_163_add) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[84]">gf2_163_mul</a> from sls10ere_math.o(i.gf2_163_mul) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[81]">gf2_163_square</a> from sls10ere_math.o(i.gf2_163_square) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[80]">gf2_163_sum</a> from sls10ere_math.o(i.gf2_163_sum) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[89]">gf2_193_add</a> from sls10ere_math.o(i.gf2_193_add) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[8a]">gf2_193_mul</a> from sls10ere_math.o(i.gf2_193_mul) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[87]">gf2_193_square</a> from sls10ere_math.o(i.gf2_193_square) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[86]">gf2_193_sum</a> from sls10ere_math.o(i.gf2_193_sum) referenced from sls10ere_math.o(i.gf2n_init)
 <LI><a href="#[74]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[76]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(.text)
</UL>
<P><STRONG><a name="[1b9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[93]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ae]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1ba]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[95]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1bb]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1bc]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1bd]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[96]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1be]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN0_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN0_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN0_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN0_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CCU40_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CCU40_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CCU41_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CCU41_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CCU41_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CCU41_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CCU42_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CCU42_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CCU42_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CCU42_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CCU43_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CCU43_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CCU43_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CCU43_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CCU80_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CCU80_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CCU80_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CCU80_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CCU81_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CCU81_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CCU81_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CCU81_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DAC0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DAC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DSD0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DSD0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DSD0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DSD0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DSD0_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DSD0_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DSD0_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DSD0_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ERU0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ERU0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>ERU0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>ERU1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ERU1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ERU1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ERU1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>ETH0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>FCE0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPDMA0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GPDMA1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>LEDTS0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PMU0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>POSIF0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>POSIF0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>POSIF1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>POSIF1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SCU_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>SDMMC0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>USB0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>USIC0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>USIC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>USIC0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>USIC0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>USIC0_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USIC1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USIC1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>USIC1_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USIC2_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>USIC2_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>USIC2_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>USIC2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>VADC0_C0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>VADC0_C0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>VADC0_C0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>VADC0_C0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>VADC0_G0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>VADC0_G0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>VADC0_G0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>VADC0_G0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>VADC0_G1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>VADC0_G1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>VADC0_G1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>VADC0_G1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>VADC0_G2_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>VADC0_G2_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>VADC0_G2_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>VADC0_G2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>VADC0_G3_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>VADC0_G3_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>VADC0_G3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>VADC0_G3_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4700.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_rand
</UL>

<P><STRONG><a name="[1bf]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>___aeabi_memcpy4$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memcpy
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[1c2]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1c7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[92]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Main_cpp_66946e4d
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baro_test()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::calcTemp(int)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::calcPressure(int)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::calcTemp(int)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::calcPressure(int)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baro_test()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Main_cpp_66946e4d
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::calcTemp(int)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::calcPressure(int)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baro_test()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::calcTemp(int)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::calcPressure(int)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Main_cpp_66946e4d
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::calcTemp(int)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::calcPressure(int)
</UL>

<P><STRONG><a name="[196]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1ca]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1cb]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1cc]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[97]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[a2]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[a1]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[197]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1ce]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[94]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1cf]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1d1]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>CCU40_0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.CCU40_0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CCU40_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.CCU40_1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>ECDSA_verify</STRONG> (Thumb, 360 bytes, Stack size 272 bytes, sls10ere_math.o(i.ECDSA_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ECDSA_verify &rArr; ecc_mul_projective &rArr; mont_ecc_mul &rArr; mont_ecc_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfp_divide
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_on_curve
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_mul_projective
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_add_point_x
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_sub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_iszero
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_authenticate
</UL>

<P><STRONG><a name="[10]"></a>ERU0_0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pin_interrupt.o(i.ERU0_0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>OSCHP_GetFrequency</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_xmc4700.o(i.OSCHP_GetFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>

<P><STRONG><a name="[c1]"></a>SWI_BIFDelay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board.o(i.SWI_BIFDelay))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_WakeUpFromPWDN
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_HardRST
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_pass
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_output
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fail
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP1
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP0
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_wait_wr_done
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_EINT
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_write_challenge_read_response
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReceiveWord
</UL>

<P><STRONG><a name="[1a1]"></a>SWI_BIFHALSetTauSWI_BIF</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, swi_hal.o(i.SWI_BIFHALSetTauSWI_BIF))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[bc]"></a>SWI_BIFTransReadMultUint8</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, swi_hal.o(i.SWI_BIFTransReadMultUint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReceiveWord
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_read_data
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_read_response
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_read_ODC
</UL>

<P><STRONG><a name="[bf]"></a>SWI_BIFTransReadUint16</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, swi_hal.o(i.SWI_BIFTransReadUint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SWI_BIFTransReadUint16 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReceiveWord
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_write_data
</UL>

<P><STRONG><a name="[c0]"></a>SWI_BIFTransReadUint8</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, swi_hal.o(i.SWI_BIFTransReadUint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SWI_BIFTransReadUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReceiveWord
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_write_data
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_wait_wr_done
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_write_challenge_read_response
</UL>

<P><STRONG><a name="[c7]"></a>SWI_BIFTransWriteMultUint8</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, swi_hal.o(i.SWI_BIFTransWriteMultUint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SWI_BIFTransWriteMultUint8 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_write_challenge
</UL>

<P><STRONG><a name="[c8]"></a>SWI_BIFTransWriteUint16</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, swi_hal.o(i.SWI_BIFTransWriteUint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SWI_BIFTransWriteUint16 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_write_data
</UL>

<P><STRONG><a name="[c9]"></a>SWI_BIFTransWriteUint8</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, swi_hal.o(i.SWI_BIFTransWriteUint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SWI_BIFTransWriteUint8 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_write_data
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_write_challenge_read_response
</UL>

<P><STRONG><a name="[ca]"></a>SWI_BIFTrans_Abort_EINT</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, swi_hal.o(i.SWI_BIFTrans_Abort_EINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SWI_BIFTrans_Abort_EINT &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin_dir
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP1
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP0
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_EINT
</UL>

<P><STRONG><a name="[cc]"></a>SWI_BIFTrans_DIE0</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, swi_hal.o(i.SWI_BIFTrans_DIE0))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SWI_BIFTrans_DIE0 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[cd]"></a>SWI_BIFTrans_DIE1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, swi_hal.o(i.SWI_BIFTrans_DIE1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SWI_BIFTrans_DIE1 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[ce]"></a>SWI_BIFTrans_DIP0</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, swi_hal.o(i.SWI_BIFTrans_DIP0))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SWI_BIFTrans_DIP0 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_Abort_EINT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[cf]"></a>SWI_BIFTrans_DIP1</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, swi_hal.o(i.SWI_BIFTrans_DIP1))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SWI_BIFTrans_DIP1 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_Abort_EINT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[d0]"></a>SWI_BIFTrans_DISS</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, swi_hal.o(i.SWI_BIFTrans_DISS))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SWI_BIFTrans_DISS &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[d1]"></a>SWI_BIFTrans_EINT</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, swi_hal.o(i.SWI_BIFTrans_EINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SWI_BIFTrans_EINT &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_Abort_EINT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_wait_wr_done
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_write_challenge_read_response
</UL>

<P><STRONG><a name="[d2]"></a>SWI_BIFTrans_HardRST</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, swi_hal.o(i.SWI_BIFTrans_HardRST))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SWI_BIFTrans_HardRST &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin_dir
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Test_Init
</UL>

<P><STRONG><a name="[d3]"></a>SWI_BIFTrans_SDA</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, swi_hal.o(i.SWI_BIFTrans_SDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SWI_BIFTrans_SDA &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_ECC_Test
</UL>

<P><STRONG><a name="[d4]"></a>SWI_BIFTrans_WD</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, swi_hal.o(i.SWI_BIFTrans_WD))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SWI_BIFTrans_WD &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_write_data
</UL>

<P><STRONG><a name="[d5]"></a>SWI_BIFTrans_WakeUpFromPWDN</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, swi_hal.o(i.SWI_BIFTrans_WakeUpFromPWDN))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SWI_BIFTrans_WakeUpFromPWDN &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin_dir
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Test_Init
</UL>

<P><STRONG><a name="[d6]"></a>Sls10ere_ECC</STRONG> (Thumb, 180 bytes, Stack size 208 bytes, sls10ere_auth.o(i.Sls10ere_ECC))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = Sls10ere_ECC &rArr; Sls10ere_write_challenge_read_response &rArr; Sls10ere_read_response &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_RegisterCrypto
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_write_challenge_read_response
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_read_ODC
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_ECC_Test
</UL>

<P><STRONG><a name="[da]"></a>Sls10ere_ECC_Test</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, test_case.o(i.Sls10ere_ECC_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Sls10ere_ECC_Test &rArr; Sls10ere_ECC &rArr; Sls10ere_write_challenge_read_response &rArr; Sls10ere_read_response &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_ECC
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_SDA
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Run_Test
</UL>

<P><STRONG><a name="[db]"></a>Sls10ere_NVM_Test</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, test_case.o(i.Sls10ere_NVM_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Sls10ere_NVM_Test &rArr; Sls10ere_nvm_write_data &rArr; Sls10ere_nvm_read_data &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_write_data
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Run_Test
</UL>

<P><STRONG><a name="[d7]"></a>Sls10ere_RegisterCrypto</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, sls10ere_crypto.o(i.Sls10ere_RegisterCrypto))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sls10ere_RegisterCrypto &rArr; Sls10ere_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memset
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_ECC
</UL>

<P><STRONG><a name="[e0]"></a>Sls10ere_Run_Test</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, test_case.o(i.Sls10ere_Run_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Sls10ere_Run_Test &rArr; Sls10ere_ECC_Test &rArr; Sls10ere_ECC &rArr; Sls10ere_write_challenge_read_response &rArr; Sls10ere_read_response &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_NVM_Test
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_ECC_Test
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_pass
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_output
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>Sls10ere_SWI_BIF_search_ids</STRONG> (Thumb, 586 bytes, Stack size 152 bytes, sls10ere_swi_bif.o(i.Sls10ere_SWI_BIF_search_ids))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = Sls10ere_SWI_BIF_search_ids &rArr; SWI_BIFTrans_DIP1 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DISS
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP1
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP0
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIE1
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIE0
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ub_SizeOfStack
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_push
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_pop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_UidSearch_SetDipDoneBit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_UidSearch_SetDIE1Info
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_UidSearch_SetDIE0Info
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_UidSearch_GetDipDoneBit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_UidSearch_GetDIE1Info
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_UidSearch_GetDIE0Info
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransWriteUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Test_Init
</UL>

<P><STRONG><a name="[ee]"></a>Sls10ere_Test_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, test_case.o(i.Sls10ere_Test_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Sls10ere_Test_Init &rArr; Sls10ere_SWI_BIF_search_ids &rArr; SWI_BIFTrans_DIP1 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_WakeUpFromPWDN
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_HardRST
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timing_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fail
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>Sls10ere_nvm_read_data</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, sls10ere_nvm.o(i.Sls10ere_nvm_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Sls10ere_nvm_read_data &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadMultUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_write_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_NVM_Test
</UL>

<P><STRONG><a name="[f7]"></a>Sls10ere_nvm_wait_wr_done</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sls10ere_nvm.o(i.Sls10ere_nvm_wait_wr_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Sls10ere_nvm_wait_wr_done &rArr; SWI_BIFTransReadUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_EINT
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_write_data
</UL>

<P><STRONG><a name="[dd]"></a>Sls10ere_nvm_write_data</STRONG> (Thumb, 620 bytes, Stack size 72 bytes, sls10ere_nvm.o(i.Sls10ere_nvm_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Sls10ere_nvm_write_data &rArr; Sls10ere_nvm_read_data &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_read_data
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_WD
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransWriteUint16
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadUint16
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_nvm_wait_wr_done
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransWriteUint8
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_NVM_Test
</UL>

<P><STRONG><a name="[d8]"></a>Sls10ere_read_ODC</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sls10ere_auth.o(i.Sls10ere_read_ODC))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Sls10ere_read_ODC &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadMultUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_ECC
</UL>

<P><STRONG><a name="[f9]"></a>Sls10ere_read_response</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, sls10ere_auth.o(i.Sls10ere_read_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Sls10ere_read_response &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadMultUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_write_challenge_read_response
</UL>

<P><STRONG><a name="[fa]"></a>Sls10ere_write_challenge</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, sls10ere_auth.o(i.Sls10ere_write_challenge))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Sls10ere_write_challenge &rArr; SWI_BIFTransWriteMultUint8 &rArr; SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransWriteMultUint8
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_write_challenge_read_response
</UL>

<P><STRONG><a name="[d9]"></a>Sls10ere_write_challenge_read_response</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, sls10ere_auth.o(i.Sls10ere_write_challenge_read_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Sls10ere_write_challenge_read_response &rArr; Sls10ere_read_response &rArr; SWI_BIFTransReadMultUint8 &rArr; SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_EINT
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransWriteUint8
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadUint8
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_write_challenge
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_read_response
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_ECC
</UL>

<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timer.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>SystemCoreClockSetup</STRONG> (Thumb, 470 bytes, Stack size 8 bytes, system_xmc4700.o(i.SystemCoreClockSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockSetup &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[fe]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, system_xmc4700.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>

<P><STRONG><a name="[ff]"></a>SystemCoreSetup</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, system_xmc4700.o(i.SystemCoreSetup))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[75]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, system_xmc4700.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SystemCoreClockSetup &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreSetup
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>USIC0_5_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, receive.o(i.USIC0_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USIC0_5_IRQHandler &rArr; Data_Receive_Prepare(TerminalCommand*, unsigned char) &rArr; TerminalCommand::terminalCommandHandler() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_GetReceivedData
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Receive_Prepare(TerminalCommand*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USIC1_1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wire.o(i.USIC1_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USIC1_1_IRQHandler &rArr; TwoWire::ReceiveHandler()
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::ReceiveHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>USIC1_2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wire.o(i.USIC1_2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USIC1_2_IRQHandler &rArr; TwoWire::ProtocolHandler() &rArr; TwoWire::OnReceiveService(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::ProtocolHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>USIC1_5_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, receive.o(i.USIC1_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USIC1_5_IRQHandler &rArr; Data_Receive_Prepare(TerminalCommand*, unsigned char) &rArr; TerminalCommand::terminalCommandHandler() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_GetReceivedData
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Receive_Prepare(TerminalCommand*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>USIC2_4_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, receive.o(i.USIC2_4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USIC2_4_IRQHandler &rArr; Data_Receive_Prepare(TerminalCommand*, unsigned char) &rArr; TerminalCommand::terminalCommandHandler() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_GetReceivedData
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Receive_Prepare(TerminalCommand*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>USIC2_5_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, receive.o(i.USIC2_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USIC2_5_IRQHandler &rArr; Data_Receive_Prepare(TerminalCommand*, unsigned char) &rArr; TerminalCommand::terminalCommandHandler() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_GetReceivedData
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Receive_Prepare(TerminalCommand*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4700.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>XMC_CCU4_EnableModule</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, xmc_ccu4.o(i.XMC_CCU4_EnableModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XMC_CCU4_EnableModule &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableClock
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_RESET_DeassertPeripheralReset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_UngatePeripheralClock
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_Init
</UL>

<P><STRONG><a name="[108]"></a>XMC_CCU4_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, xmc_ccu4.o(i.XMC_CCU4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XMC_CCU4_Init &rArr; XMC_CCU4_EnableModule &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableModule
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
</UL>

<P><STRONG><a name="[128]"></a>XMC_CCU4_SLICE_CompareInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, xmc_ccu4.o(i.XMC_CCU4_SLICE_CompareInit))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
</UL>

<P><STRONG><a name="[12d]"></a>XMC_CCU4_SLICE_SetInterruptNode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, xmc_ccu4.o(i.XMC_CCU4_SLICE_SetInterruptNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_CCU4_SLICE_SetInterruptNode
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
</UL>

<P><STRONG><a name="[127]"></a>XMC_CCU4_SetModuleClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc_ccu4.o(i.XMC_CCU4_SetModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
</UL>

<P><STRONG><a name="[135]"></a>XMC_GPIO_Init</STRONG> (Thumb, 174 bytes, Stack size 12 bytes, xmc4_gpio.o(i.XMC_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = XMC_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::end()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::end()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GROUND_UART_Config()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADAR_UART_Config()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_UART_Config()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_UART_Config()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::init()
</UL>

<P><STRONG><a name="[1ad]"></a>XMC_GPIO_SetMode</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, xmc_gpio.o(i.XMC_GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = XMC_GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_pass
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fail
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin_dir
</UL>

<P><STRONG><a name="[178]"></a>XMC_I2C_CH_DisableEvent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc_i2c.o(i.XMC_I2C_CH_DisableEvent))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::end()
</UL>

<P><STRONG><a name="[173]"></a>XMC_I2C_CH_EnableEvent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc_i2c.o(i.XMC_I2C_CH_EnableEvent))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::OnReceiveService(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[16e]"></a>XMC_I2C_CH_GetReceivedData</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, xmc_i2c.o(i.XMC_I2C_CH_GetReceivedData))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::flush()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::OnReceiveService(unsigned char*, unsigned char)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::ReceiveHandler()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[109]"></a>XMC_I2C_CH_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, xmc_i2c.o(i.XMC_I2C_CH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_SetSlaveAddress
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_SetBaudrate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
</UL>

<P><STRONG><a name="[10d]"></a>XMC_I2C_CH_MasterReceiveAck</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, xmc_i2c.o(i.XMC_I2C_CH_MasterReceiveAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_I2C_CH_MasterReceiveAck
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_GetTransmitBufferStatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_ClearStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[110]"></a>XMC_I2C_CH_MasterReceiveNack</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, xmc_i2c.o(i.XMC_I2C_CH_MasterReceiveNack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_I2C_CH_MasterReceiveNack
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_GetTransmitBufferStatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_ClearStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[111]"></a>XMC_I2C_CH_MasterRepeatedStart</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, xmc_i2c.o(i.XMC_I2C_CH_MasterRepeatedStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XMC_I2C_CH_MasterRepeatedStart
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_GetTransmitBufferStatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_ClearStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[112]"></a>XMC_I2C_CH_MasterStart</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, xmc_i2c.o(i.XMC_I2C_CH_MasterStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XMC_I2C_CH_MasterStart
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_GetTransmitBufferStatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_ClearStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(unsigned char)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[113]"></a>XMC_I2C_CH_MasterStop</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, xmc_i2c.o(i.XMC_I2C_CH_MasterStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_I2C_CH_MasterStop
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_GetTransmitBufferStatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_ClearStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(unsigned char)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[114]"></a>XMC_I2C_CH_MasterTransmit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, xmc_i2c.o(i.XMC_I2C_CH_MasterTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_I2C_CH_MasterTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_GetTransmitBufferStatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_ClearStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(unsigned char)
</UL>

<P><STRONG><a name="[10c]"></a>XMC_I2C_CH_SetBaudrate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, xmc_i2c.o(i.XMC_I2C_CH_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_Init
</UL>

<P><STRONG><a name="[10b]"></a>XMC_I2C_CH_SetSlaveAddress</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, xmc_i2c.o(i.XMC_I2C_CH_SetSlaveAddress))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
</UL>

<P><STRONG><a name="[116]"></a>XMC_I2C_CH_SlaveTransmit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, xmc_i2c.o(i.XMC_I2C_CH_SlaveTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_I2C_CH_SlaveTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_GetTransmitBufferStatus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_ClearStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(unsigned char)
</UL>

<P><STRONG><a name="[117]"></a>XMC_I2C_CH_Stop</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, xmc_i2c.o(i.XMC_I2C_CH_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_I2C_CH_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_GetTransmitBufferStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::end()
</UL>

<P><STRONG><a name="[105]"></a>XMC_SCU_CLOCK_EnableClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableModule
</UL>

<P><STRONG><a name="[11a]"></a>XMC_SCU_CLOCK_GetPeripheralClockFrequency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_GetPeripheralClockFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_SetBaudrate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetBaudrate
</UL>

<P><STRONG><a name="[106]"></a>XMC_SCU_CLOCK_UngatePeripheralClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xmc4_scu.o(i.XMC_SCU_CLOCK_UngatePeripheralClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_SCU_CLOCK_UngatePeripheralClock
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_Enable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableModule
</UL>

<P><STRONG><a name="[107]"></a>XMC_SCU_RESET_DeassertPeripheralReset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xmc4_scu.o(i.XMC_SCU_RESET_DeassertPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_Enable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableModule
</UL>

<P><STRONG><a name="[188]"></a>XMC_SPI_CH_GetReceivedData</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, xmc_spi.o(i.XMC_SPI_CH_GetReceivedData))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char)
</UL>

<P><STRONG><a name="[118]"></a>XMC_SPI_CH_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xmc_spi.o(i.XMC_SPI_CH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = XMC_SPI_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetBaudrate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::init()
</UL>

<P><STRONG><a name="[119]"></a>XMC_SPI_CH_SetBaudrate</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, xmc_spi.o(i.XMC_SPI_CH_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = XMC_SPI_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetPeripheralClockFrequency
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::beginTransaction(SPISettings)
</UL>

<P><STRONG><a name="[185]"></a>XMC_SPI_CH_Stop</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, xmc_spi.o(i.XMC_SPI_CH_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::end()
</UL>

<P><STRONG><a name="[11b]"></a>XMC_SPI_CH_Transmit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, xmc_spi.o(i.XMC_SPI_CH_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_SPI_CH_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_ClearStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char)
</UL>

<P><STRONG><a name="[100]"></a>XMC_UART_CH_GetReceivedData</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, xmc_uart.o(i.XMC_UART_CH_GetReceivedData))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC2_5_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC2_4_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC1_5_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_5_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>XMC_UART_CH_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, xmc_uart.o(i.XMC_UART_CH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = XMC_UART_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetBaudrate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GROUND_UART_Config()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADAR_UART_Config()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_UART_Config()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_UART_Config()
</UL>

<P><STRONG><a name="[13c]"></a>XMC_UART_CH_Transmit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, xmc_uart.o(i.XMC_UART_CH_Transmit))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send(XMC_USIC_CH*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[10a]"></a>XMC_USIC_CH_Enable</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, xmc_usic.o(i.XMC_USIC_CH_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XMC_USIC_CH_Enable &rArr; XMC_USIC_Enable &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_Init
</UL>

<P><STRONG><a name="[17a]"></a>XMC_USIC_CH_RXFIFO_Configure</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, xmc_usic.o(i.XMC_USIC_CH_RXFIFO_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_USIC_CH_RXFIFO_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::end()
</UL>

<P><STRONG><a name="[115]"></a>XMC_USIC_CH_SetBaudrate</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, xmc_usic.o(i.XMC_USIC_CH_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetPeripheralClockFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_SetBaudrate
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_SetBaudrate
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_Init
</UL>

<P><STRONG><a name="[137]"></a>XMC_USIC_CH_SetInterruptNodePointer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xmc_usic.o(i.XMC_USIC_CH_SetInterruptNodePointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_USIC_CH_SetInterruptNodePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GROUND_UART_Config()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADAR_UART_Config()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTxNVIC_Config()
</UL>

<P><STRONG><a name="[179]"></a>XMC_USIC_CH_TXFIFO_Configure</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, xmc_usic.o(i.XMC_USIC_CH_TXFIFO_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_USIC_CH_TXFIFO_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::end()
</UL>

<P><STRONG><a name="[11e]"></a>XMC_USIC_Enable</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, xmc_usic.o(i.XMC_USIC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XMC_USIC_Enable &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_RESET_DeassertPeripheralReset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_UngatePeripheralClock
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_Enable
</UL>

<P><STRONG><a name="[11f]"></a>UartConfig()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bspusart.o(i._Z10UartConfigv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UartConfig() &rArr; GROUND_UART_Config() &rArr; XMC_UART_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GROUND_UART_Config()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADAR_UART_Config()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTxNVIC_Config()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_UART_Config()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_UART_Config()
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>Timer1Config()</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, timer.o(i._Z12Timer1Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Timer1Config() &rArr; XMC_CCU4_Init &rArr; XMC_CCU4_EnableModule &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SetModuleClock
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetInterruptNode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_CompareInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetTimerCompareMatch(CCU4_CC4_TypeDef*, unsigned short)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU4_CC4_TypeDef*, unsigned short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableShadowTransfer(CCU4_GLOBAL_TypeDef*, unsigned)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_EnableEvent(CCU4_CC4_TypeDef*, XMC_CCU4_SLICE_IRQ_ID)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_StartPrescaler(CCU4_GLOBAL_TypeDef*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableClock(CCU4_GLOBAL_TypeDef*, unsigned char)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>Timer2Config()</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, timer.o(i._Z12Timer2Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Timer2Config() &rArr; XMC_CCU4_Init &rArr; XMC_CCU4_EnableModule &rArr; XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SetModuleClock
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetInterruptNode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_CompareInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetTimerCompareMatch(CCU4_CC4_TypeDef*, unsigned short)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU4_CC4_TypeDef*, unsigned short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableShadowTransfer(CCU4_GLOBAL_TypeDef*, unsigned)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_SLICE_EnableEvent(CCU4_CC4_TypeDef*, XMC_CCU4_SLICE_IRQ_ID)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_StartPrescaler(CCU4_GLOBAL_TypeDef*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_CCU4_EnableClock(CCU4_GLOBAL_TypeDef*, unsigned char)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>SystickConfig()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, timer.o(i._Z13SystickConfigv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystickConfig() &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>PC_UART_Config()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bspusart.o(i._Z14PC_UART_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PC_UART_Config() &rArr; XMC_UART_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_SetInputSource(XMC_USIC_CH*, XMC_UART_CH_INPUT, unsigned char)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Start(XMC_USIC_CH*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig()
</UL>

<P><STRONG><a name="[121]"></a>STM_UART_Config()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bspusart.o(i._Z15STM_UART_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STM_UART_Config() &rArr; XMC_UART_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_SetInputSource(XMC_USIC_CH*, XMC_UART_CH_INPUT, unsigned char)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Start(XMC_USIC_CH*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig()
</UL>

<P><STRONG><a name="[124]"></a>UARTxNVIC_Config()</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, bspusart.o(i._Z16UARTxNVIC_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTxNVIC_Config() &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_EnableEvent(XMC_USIC_CH*, unsigned)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn_Type)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetInterruptNodePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig()
</UL>

<P><STRONG><a name="[123]"></a>RADAR_UART_Config()</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, bspusart.o(i._Z17RADAR_UART_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RADAR_UART_Config() &rArr; XMC_UART_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_SetInputSource(XMC_USIC_CH*, XMC_UART_CH_INPUT, unsigned char)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_EnableEvent(XMC_USIC_CH*, unsigned)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Start(XMC_USIC_CH*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn_Type)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetInterruptNodePointer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig()
</UL>

<P><STRONG><a name="[122]"></a>GROUND_UART_Config()</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, bspusart.o(i._Z18GROUND_UART_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GROUND_UART_Config() &rArr; XMC_UART_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_SetInputSource(XMC_USIC_CH*, XMC_UART_CH_INPUT, unsigned char)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_EnableEvent(XMC_USIC_CH*, unsigned)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Start(XMC_USIC_CH*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn_Type)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetInterruptNodePointer
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig()
</UL>

<P><STRONG><a name="[101]"></a>Data_Receive_Prepare(TerminalCommand*, unsigned char)</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, receive.o(i._Z20Data_Receive_PrepareP15TerminalCommandh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Data_Receive_Prepare(TerminalCommand*, unsigned char) &rArr; TerminalCommand::terminalCommandHandler() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC2_5_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC2_4_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC1_5_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_5_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>send(XMC_USIC_CH*, const unsigned char*, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, driver.o(i._Z4sendP11XMC_USIC_CHPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send(XMC_USIC_CH*, const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send2stm(unsigned char)
</UL>

<P><STRONG><a name="[140]"></a>delay_ms(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i._Z8delay_msj))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::measurePressureOnce(int&, unsigned char)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::measureTempOnce(int&, unsigned char)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baro_test()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::begin(TwoWire&, unsigned char)
</UL>

<P><STRONG><a name="[13d]"></a>send2stm(unsigned char)</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, driver.o(i._Z8send2stmh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = send2stm(unsigned char) &rArr; send(XMC_USIC_CH*, const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send(XMC_USIC_CH*, const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>baro_test()</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, main.o(i._Z9baro_testv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = baro_test() &rArr; Dps310::measurePressureOnce(int&, unsigned char) &rArr; Dps310::startMeasurePressureOnce(unsigned char) &rArr; Dps310::configPressure(unsigned char, unsigned char) &rArr;  Dps310::configPressure(unsigned char, unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::measurePressureOnce(int&, unsigned char)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::measureTempOnce(int&, unsigned char)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14d]"></a>SPISettings::SPISettings(unsigned, unsigned char, unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dps310.o(i._ZN11SPISettingsC1Ejhh))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByteSpi(unsigned char, unsigned char, unsigned char)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readBlockSPI(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readByteSPI(unsigned char)
</UL>

<P><STRONG><a name="[1d3]"></a>SPISettings::SPISettings__sub_object(unsigned, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dps310.o(i._ZN11SPISettingsC1Ejhh), UNUSED)

<P><STRONG><a name="[13a]"></a>TerminalCommand::terminalCommandHandler()</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, receive.o(i._ZN15TerminalCommand22terminalCommandHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TerminalCommand::terminalCommandHandler() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Receive_Prepare(TerminalCommand*, unsigned char)
</UL>

<P><STRONG><a name="[19b]"></a>TerminalCommand::TerminalCommand()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, receive.o(i._ZN15TerminalCommandC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_Receive_cpp_66f2438e
</UL>

<P><STRONG><a name="[1d4]"></a>TerminalCommand::TerminalCommand__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, receive.o(i._ZN15TerminalCommandC1Ev), UNUSED)

<P><STRONG><a name="[143]"></a>Dps310::configTemp(unsigned char, unsigned char)</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, dps310.o(i._ZN6Dps31010configTempEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + In Cycle
<LI>Call Chain = Dps310::configTemp(unsigned char, unsigned char) &rArr;  Dps310::configTemp(unsigned char, unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByte(unsigned char, unsigned char)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByteBitfield(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::configTemp(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::init()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::startMeasureTempOnce(unsigned char)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::configTemp(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[146]"></a>Dps310::readcoeffs()</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, dps310.o(i._ZN6Dps31010readcoeffsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Dps310::readcoeffs() &rArr; Dps310::readBlock(unsigned char, unsigned char, unsigned char*) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readBlock(unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::init()
</UL>

<P><STRONG><a name="[148]"></a>Dps310::correctTemp()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dps310.o(i._ZN6Dps31011correctTempEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Dps310::correctTemp() &rArr; Dps310::measureTempOnce(int&) &rArr; Dps310::measureTempOnce(int&, unsigned char) &rArr; Dps310::startMeasureTempOnce(unsigned char) &rArr; Dps310::configTemp(unsigned char, unsigned char) &rArr;  Dps310::configTemp(unsigned char, unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByte(unsigned char, unsigned char)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::measureTempOnce(int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::init()
</UL>

<P><STRONG><a name="[14a]"></a>Dps310::getPressure(int*)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dps310.o(i._ZN6Dps31011getPressureEPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Dps310::getPressure(int*) &rArr; Dps310::readBlock(unsigned char, unsigned char, unsigned char*) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readBlock(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::calcPressure(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::getSingleResult(int&)
</UL>

<P><STRONG><a name="[14c]"></a>Dps310::readByteSPI(unsigned char)</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, dps310.o(i._ZN6Dps31011readByteSPIEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Dps310::readByteSPI(unsigned char) &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::begin() &rArr; SPIClass::init() &rArr; XMC_SPI_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPISettings::SPISettings(unsigned, unsigned char, unsigned char)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::beginTransaction(SPISettings)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::endTransaction()
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readByte(unsigned char)
</UL>

<P><STRONG><a name="[15a]"></a>Dps310::calcBusyTime(unsigned short, unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, dps310.o(i._ZN6Dps31012calcBusyTimeEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Dps310::calcBusyTime(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::measurePressureOnce(int&, unsigned char)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::measureTempOnce(int&, unsigned char)
</UL>

<P><STRONG><a name="[14b]"></a>Dps310::calcPressure(int)</STRONG> (Thumb, 324 bytes, Stack size 112 bytes, dps310.o(i._ZN6Dps31012calcPressureEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Dps310::calcPressure(int) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::getPressure(int*)
</UL>

<P><STRONG><a name="[152]"></a>Dps310::readBlockSPI(unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, dps310.o(i._ZN6Dps31012readBlockSPIEhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Dps310::readBlockSPI(unsigned char, unsigned char, unsigned char*) &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::begin() &rArr; SPIClass::init() &rArr; XMC_SPI_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPISettings::SPISettings(unsigned, unsigned char, unsigned char)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::beginTransaction(SPISettings)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::endTransaction()
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readBlock(unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[153]"></a>Dps310::writeByteSpi(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, dps310.o(i._ZN6Dps31012writeByteSpiEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Dps310::writeByteSpi(unsigned char, unsigned char, unsigned char) &rArr; Dps310::readByte(unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readByte(unsigned char)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPISettings::SPISettings(unsigned, unsigned char, unsigned char)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::beginTransaction(SPISettings)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::endTransaction()
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[155]"></a>Dps310::configPressure(unsigned char, unsigned char)</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, dps310.o(i._ZN6Dps31014configPressureEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + In Cycle
<LI>Call Chain = Dps310::configPressure(unsigned char, unsigned char) &rArr;  Dps310::configPressure(unsigned char, unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByte(unsigned char, unsigned char)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByteBitfield(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::configPressure(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::init()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::startMeasurePressureOnce(unsigned char)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::configPressure(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[156]"></a>Dps310::getSingleResult(int&)</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, dps310.o(i._ZN6Dps31015getSingleResultERi))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Dps310::getSingleResult(int&) &rArr; Dps310::getTemp(int*) &rArr; Dps310::readBlock(unsigned char, unsigned char, unsigned char*) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::getTemp(int*)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readByteBitfield(unsigned char, unsigned char, unsigned char)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::getPressure(int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::measurePressureOnce(int&, unsigned char)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::measureTempOnce(int&, unsigned char)
</UL>

<P><STRONG><a name="[149]"></a>Dps310::measureTempOnce(int&)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dps310.o(i._ZN6Dps31015measureTempOnceERi))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Dps310::measureTempOnce(int&) &rArr; Dps310::measureTempOnce(int&, unsigned char) &rArr; Dps310::startMeasureTempOnce(unsigned char) &rArr; Dps310::configTemp(unsigned char, unsigned char) &rArr;  Dps310::configTemp(unsigned char, unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::measureTempOnce(int&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::init()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::correctTemp()
</UL>

<P><STRONG><a name="[13f]"></a>Dps310::measureTempOnce(int&, unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, dps310.o(i._ZN6Dps31015measureTempOnceERih))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Dps310::measureTempOnce(int&, unsigned char) &rArr; Dps310::startMeasureTempOnce(unsigned char) &rArr; Dps310::configTemp(unsigned char, unsigned char) &rArr;  Dps310::configTemp(unsigned char, unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms(unsigned)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::standby()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::startMeasureTempOnce(unsigned char)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::getSingleResult(int&)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::calcBusyTime(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baro_test()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::measureTempOnce(int&)
</UL>

<P><STRONG><a name="[157]"></a>Dps310::readByteBitfield(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dps310.o(i._ZN6Dps31016readByteBitfieldEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Dps310::readByteBitfield(unsigned char, unsigned char, unsigned char) &rArr; Dps310::readByte(unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::init()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::getSingleResult(int&)
</UL>

<P><STRONG><a name="[145]"></a>Dps310::writeByteBitfield(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, dps310.o(i._ZN6Dps31017writeByteBitfieldEhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Dps310::writeByteBitfield(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Dps310::writeByteBitfield(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Dps310::writeByte(unsigned char, unsigned char, unsigned char) &rArr; Dps310::writeByteSpi(unsigned char, unsigned char, unsigned char) &rArr; Dps310::readByte(unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByteBitfield(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::standby()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::init()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::configPressure(unsigned char, unsigned char)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::configTemp(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[15c]"></a>Dps310::writeByteBitfield(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, dps310.o(i._ZN6Dps31017writeByteBitfieldEhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Dps310::writeByteBitfield(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Dps310::writeByte(unsigned char, unsigned char, unsigned char) &rArr; Dps310::writeByteSpi(unsigned char, unsigned char, unsigned char) &rArr; Dps310::readByte(unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByte(unsigned char, unsigned char, unsigned char)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByteBitfield(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[141]"></a>Dps310::measurePressureOnce(int&, unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, dps310.o(i._ZN6Dps31019measurePressureOnceERih))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Dps310::measurePressureOnce(int&, unsigned char) &rArr; Dps310::startMeasurePressureOnce(unsigned char) &rArr; Dps310::configPressure(unsigned char, unsigned char) &rArr;  Dps310::configPressure(unsigned char, unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms(unsigned)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::standby()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::startMeasurePressureOnce(unsigned char)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::getSingleResult(int&)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::calcBusyTime(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baro_test()
</UL>

<P><STRONG><a name="[159]"></a>Dps310::startMeasureTempOnce(unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dps310.o(i._ZN6Dps31020startMeasureTempOnceEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Dps310::startMeasureTempOnce(unsigned char) &rArr; Dps310::configTemp(unsigned char, unsigned char) &rArr;  Dps310::configTemp(unsigned char, unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::setOpMode(unsigned char, unsigned char, unsigned char)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::configTemp(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::measureTempOnce(int&, unsigned char)
</UL>

<P><STRONG><a name="[15e]"></a>Dps310::startMeasurePressureOnce(unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dps310.o(i._ZN6Dps31024startMeasurePressureOnceEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Dps310::startMeasurePressureOnce(unsigned char) &rArr; Dps310::configPressure(unsigned char, unsigned char) &rArr;  Dps310::configPressure(unsigned char, unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::setOpMode(unsigned char, unsigned char, unsigned char)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::configPressure(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::measurePressureOnce(int&, unsigned char)
</UL>

<P><STRONG><a name="[160]"></a>Dps310::end()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dps310.o(i._ZN6Dps3103endEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Dps310::end() &rArr; Dps310::standby() &rArr; Dps310::writeByteBitfield(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Dps310::writeByteBitfield(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Dps310::writeByte(unsigned char, unsigned char, unsigned char) &rArr; Dps310::writeByteSpi(unsigned char, unsigned char, unsigned char) &rArr; Dps310::readByte(unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::standby()
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::~Dps310()
</UL>

<P><STRONG><a name="[161]"></a>Dps310::init()</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, dps310.o(i._ZN6Dps3104initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = Dps310::init() &rArr; Dps310::correctTemp() &rArr; Dps310::measureTempOnce(int&) &rArr; Dps310::measureTempOnce(int&, unsigned char) &rArr; Dps310::startMeasureTempOnce(unsigned char) &rArr; Dps310::configTemp(unsigned char, unsigned char) &rArr;  Dps310::configTemp(unsigned char, unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::standby()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByteBitfield(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readByteBitfield(unsigned char, unsigned char, unsigned char)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::measureTempOnce(int&)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::configPressure(unsigned char, unsigned char)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::correctTemp()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readcoeffs()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::configTemp(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::begin(TwoWire&, unsigned char)
</UL>

<P><STRONG><a name="[162]"></a>Dps310::begin(TwoWire&)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dps310.o(i._ZN6Dps3105beginER7TwoWire))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Dps310::begin(TwoWire&) &rArr; Dps310::begin(TwoWire&, unsigned char) &rArr; Dps310::init() &rArr; Dps310::correctTemp() &rArr; Dps310::measureTempOnce(int&) &rArr; Dps310::measureTempOnce(int&, unsigned char) &rArr; Dps310::startMeasureTempOnce(unsigned char) &rArr; Dps310::configTemp(unsigned char, unsigned char) &rArr;  Dps310::configTemp(unsigned char, unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::begin(TwoWire&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[163]"></a>Dps310::begin(TwoWire&, unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dps310.o(i._ZN6Dps3105beginER7TwoWireh))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Dps310::begin(TwoWire&, unsigned char) &rArr; Dps310::init() &rArr; Dps310::correctTemp() &rArr; Dps310::measureTempOnce(int&) &rArr; Dps310::measureTempOnce(int&, unsigned char) &rArr; Dps310::startMeasureTempOnce(unsigned char) &rArr; Dps310::configTemp(unsigned char, unsigned char) &rArr;  Dps310::configTemp(unsigned char, unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms(unsigned)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::begin(TwoWire&)
</UL>

<P><STRONG><a name="[158]"></a>Dps310::getTemp(int*)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dps310.o(i._ZN6Dps3107getTempEPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Dps310::getTemp(int*) &rArr; Dps310::readBlock(unsigned char, unsigned char, unsigned char*) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readBlock(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::calcTemp(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::getSingleResult(int&)
</UL>

<P><STRONG><a name="[15b]"></a>Dps310::standby()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dps310.o(i._ZN6Dps3107standbyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Dps310::standby() &rArr; Dps310::writeByteBitfield(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Dps310::writeByteBitfield(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Dps310::writeByte(unsigned char, unsigned char, unsigned char) &rArr; Dps310::writeByteSpi(unsigned char, unsigned char, unsigned char) &rArr; Dps310::readByte(unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::setOpMode(unsigned char)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByteBitfield(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::measurePressureOnce(int&, unsigned char)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::measureTempOnce(int&, unsigned char)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::init()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::end()
</UL>

<P><STRONG><a name="[165]"></a>Dps310::calcTemp(int)</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, dps310.o(i._ZN6Dps3108calcTempEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Dps310::calcTemp(int) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::getTemp(int*)
</UL>

<P><STRONG><a name="[154]"></a>Dps310::readByte(unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, dps310.o(i._ZN6Dps3108readByteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Dps310::readByte(unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(unsigned char)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readByteSPI(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByte(unsigned char, unsigned char, unsigned char)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByteBitfield(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readByteBitfield(unsigned char, unsigned char, unsigned char)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByteSpi(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[147]"></a>Dps310::readBlock(unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, dps310.o(i._ZN6Dps3109readBlockEhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Dps310::readBlock(unsigned char, unsigned char, unsigned char*) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(unsigned char)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readBlockSPI(unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::getTemp(int*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::getPressure(int*)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readcoeffs()
</UL>

<P><STRONG><a name="[166]"></a>Dps310::setOpMode(unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dps310.o(i._ZN6Dps3109setOpModeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Dps310::setOpMode(unsigned char) &rArr; Dps310::writeByte(unsigned char, unsigned char) &rArr; Dps310::writeByte(unsigned char, unsigned char, unsigned char) &rArr; Dps310::writeByteSpi(unsigned char, unsigned char, unsigned char) &rArr; Dps310::readByte(unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByte(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::setOpMode(unsigned char, unsigned char, unsigned char)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::standby()
</UL>

<P><STRONG><a name="[15f]"></a>Dps310::setOpMode(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, dps310.o(i._ZN6Dps3109setOpModeEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Dps310::setOpMode(unsigned char, unsigned char, unsigned char) &rArr; Dps310::setOpMode(unsigned char) &rArr; Dps310::writeByte(unsigned char, unsigned char) &rArr; Dps310::writeByte(unsigned char, unsigned char, unsigned char) &rArr; Dps310::writeByteSpi(unsigned char, unsigned char, unsigned char) &rArr; Dps310::readByte(unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::setOpMode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::startMeasurePressureOnce(unsigned char)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::startMeasureTempOnce(unsigned char)
</UL>

<P><STRONG><a name="[144]"></a>Dps310::writeByte(unsigned char, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dps310.o(i._ZN6Dps3109writeByteEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Dps310::writeByte(unsigned char, unsigned char) &rArr; Dps310::writeByte(unsigned char, unsigned char, unsigned char) &rArr; Dps310::writeByteSpi(unsigned char, unsigned char, unsigned char) &rArr; Dps310::readByte(unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByte(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::setOpMode(unsigned char)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::configPressure(unsigned char, unsigned char)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::correctTemp()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::configTemp(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[15d]"></a>Dps310::writeByte(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, dps310.o(i._ZN6Dps3109writeByteEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Dps310::writeByte(unsigned char, unsigned char, unsigned char) &rArr; Dps310::writeByteSpi(unsigned char, unsigned char, unsigned char) &rArr; Dps310::readByte(unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readByte(unsigned char)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByteSpi(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByte(unsigned char, unsigned char)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByteBitfield(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[19c]"></a>Dps310::Dps310()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dps310.o(i._ZN6Dps310C1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Main_cpp_66946e4d
</UL>

<P><STRONG><a name="[1d5]"></a>Dps310::Dps310__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dps310.o(i._ZN6Dps310C1Ev), UNUSED)

<P><STRONG><a name="[7e]"></a>Dps310::~Dps310()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dps310.o(i._ZN6Dps310D1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Dps310::~Dps310() &rArr; Dps310::end() &rArr; Dps310::standby() &rArr; Dps310::writeByteBitfield(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Dps310::writeByteBitfield(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; Dps310::writeByte(unsigned char, unsigned char, unsigned char) &rArr; Dps310::writeByteSpi(unsigned char, unsigned char, unsigned char) &rArr; Dps310::readByte(unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::end()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_Main_cpp_66946e4d)
</UL>
<P><STRONG><a name="[1d6]"></a>Dps310::~Dps310__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dps310.o(i._ZN6Dps310D1Ev), UNUSED)

<P><STRONG><a name="[180]"></a>Stream::Stream__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wire.o(i._ZN6StreamC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::TwoWire()
</UL>

<P><STRONG><a name="[169]"></a>TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, wire.o(i._ZN7TwoWire11requestFromEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readBlock(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readByte(unsigned char)
</UL>

<P><STRONG><a name="[16b]"></a>TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, wire.o(i._ZN7TwoWire11requestFromEhhjhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterStop
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterStart
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterRepeatedStart
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterReceiveNack
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterReceiveAck
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_GetReceivedData
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(unsigned char)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH*)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH*, unsigned)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH*)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[102]"></a>TwoWire::ReceiveHandler()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWire14ReceiveHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TwoWire::ReceiveHandler()
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_GetReceivedData
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC1_1_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>TwoWire::ProtocolHandler()</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire15ProtocolHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TwoWire::ProtocolHandler() &rArr; TwoWire::OnReceiveService(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::OnRequestService()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::OnReceiveService(unsigned char*, unsigned char)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH*, XMC_USIC_CH_TBUF_STATUS_SET)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH*, unsigned)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH*)
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC1_2_IRQHandler
</UL>

<P><STRONG><a name="[168]"></a>TwoWire::endTransmission(unsigned char)</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, wire.o(i._ZN7TwoWire15endTransmissionEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TwoWire::endTransmission(unsigned char) &rArr; XMC_I2C_CH_MasterStart
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterTransmit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterStop
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterStart
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH*)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH*, unsigned)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH*)
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readBlock(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readByte(unsigned char)
</UL>

<P><STRONG><a name="[16a]"></a>TwoWire::endTransmission()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWire15endTransmissionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TwoWire::endTransmission() &rArr; TwoWire::endTransmission(unsigned char) &rArr; XMC_I2C_CH_MasterStart
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[171]"></a>TwoWire::OnReceiveService(unsigned char*, unsigned char)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire16OnReceiveServiceEPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TwoWire::OnReceiveService(unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_GetReceivedData
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_EnableEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::ProtocolHandler()
</UL>

<P><STRONG><a name="[172]"></a>TwoWire::OnRequestService()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWire16OnRequestServiceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TwoWire::OnRequestService()
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::ProtocolHandler()
</UL>

<P><STRONG><a name="[167]"></a>TwoWire::beginTransmission(unsigned char)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire17beginTransmissionEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TwoWire::beginTransmission(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByte(unsigned char, unsigned char, unsigned char)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readBlock(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readByte(unsigned char)
</UL>

<P><STRONG><a name="[175]"></a>TwoWire::end()</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, wire.o(i._ZN7TwoWire3endEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TwoWire::end() &rArr; XMC_USIC_CH_TXFIFO_Configure
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_TXFIFO_Configure
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_RXFIFO_Configure
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_Stop
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_DisableEvent
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetInputSource(XMC_USIC_CH*, XMC_USIC_CH_INPUT, unsigned char)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ(IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
</UL>

<P><STRONG><a name="[8c]"></a>TwoWire::read()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWire4readEv))
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.constdata__ZTV7TwoWire)
</UL>
<P><STRONG><a name="[174]"></a>TwoWire::begin(unsigned char)</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire5beginEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::end()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_SetSlaveAddress
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_GetReceivedData
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_EnableEvent
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetInputSource(XMC_USIC_CH*, XMC_USIC_CH_INPUT, unsigned char)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn_Type)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_Start(XMC_USIC_CH*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetInterruptNodePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(unsigned char)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
</UL>

<P><STRONG><a name="[164]"></a>TwoWire::begin()</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWire5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TwoWire::begin() &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::end()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_TXFIFO_Configure
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_RXFIFO_Configure
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_EnableEvent
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetInputSource(XMC_USIC_CH*, XMC_USIC_CH_INPUT, unsigned char)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn_Type)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_Start(XMC_USIC_CH*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetInterruptNodePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(unsigned char)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::begin(TwoWire&, unsigned char)
</UL>

<P><STRONG><a name="[8d]"></a>TwoWire::flush()</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWire5flushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TwoWire::flush()
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_GetReceivedData
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH*, XMC_USIC_CH_TBUF_STATUS_SET)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.constdata__ZTV7TwoWire)
</UL>
<P><STRONG><a name="[8b]"></a>TwoWire::write(unsigned char)</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TwoWire::write(unsigned char) &rArr; TwoWire::begin(unsigned char) &rArr; XMC_I2C_CH_Init &rArr; XMC_I2C_CH_SetBaudrate &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_SlaveTransmit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH*, XMC_USIC_CH_TBUF_STATUS_SET)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.constdata__ZTV7TwoWire)
</UL>
<P><STRONG><a name="[17f]"></a>TwoWire::TwoWire()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWireC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TwoWire::TwoWire()
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::Stream__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Wire_cpp_1426899b
</UL>

<P><STRONG><a name="[1d7]"></a>TwoWire::TwoWire__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWireC1Ev), UNUSED)

<P><STRONG><a name="[184]"></a>SPIClass::setBitOrder(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hw_spi.o(i._ZN8SPIClass11setBitOrderEh))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::beginTransaction(SPISettings)
</UL>

<P><STRONG><a name="[181]"></a>SPIClass::setDataMode(unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hw_spi.o(i._ZN8SPIClass11setDataModeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPIClass::setDataMode(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH*, XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL, XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::beginTransaction(SPISettings)
</UL>

<P><STRONG><a name="[151]"></a>SPIClass::endTransaction()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_spi.o(i._ZN8SPIClass14endTransactionEv))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByteSpi(unsigned char, unsigned char, unsigned char)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readBlockSPI(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readByteSPI(unsigned char)
</UL>

<P><STRONG><a name="[14e]"></a>SPIClass::beginTransaction(SPISettings)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, hw_spi.o(i._ZN8SPIClass16beginTransactionE11SPISettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::begin() &rArr; SPIClass::init() &rArr; XMC_SPI_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_SetBaudrate
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setDataMode(unsigned char)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setBitOrder(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByteSpi(unsigned char, unsigned char, unsigned char)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readBlockSPI(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readByteSPI(unsigned char)
</UL>

<P><STRONG><a name="[17b]"></a>SPIClass::end()</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, hw_spi.o(i._ZN8SPIClass3endEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPIClass::end() &rArr; XMC_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetInputSource(XMC_USIC_CH*, XMC_USIC_CH_INPUT, unsigned char)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
</UL>

<P><STRONG><a name="[187]"></a>SPIClass::init()</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, hw_spi.o(i._ZN8SPIClass4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPIClass::init() &rArr; XMC_SPI_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetInputSource(XMC_USIC_CH*, XMC_USIC_CH_INPUT, unsigned char)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
</UL>

<P><STRONG><a name="[183]"></a>SPIClass::begin()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hw_spi.o(i._ZN8SPIClass5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPIClass::begin() &rArr; SPIClass::init() &rArr; XMC_SPI_CH_Init &rArr; XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::end()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_SetBaudrate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::init()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setDataMode(unsigned char)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setBitOrder(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::beginTransaction(SPISettings)
</UL>

<P><STRONG><a name="[150]"></a>SPIClass::transfer(unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, hw_spi.o(i._ZN8SPIClass8transferEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPIClass::transfer(unsigned char) &rArr; XMC_SPI_CH_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH*, unsigned)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_Transmit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_GetReceivedData
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByteSpi(unsigned char, unsigned char, unsigned char)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readBlockSPI(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readByteSPI(unsigned char)
</UL>

<P><STRONG><a name="[19a]"></a>SPIClass::SPIClass(XMC_SPI*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_spi.o(i._ZN8SPIClassC1EP7XMC_SPI))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_HW_SPI_cpp_SPI
</UL>

<P><STRONG><a name="[1d8]"></a>SPIClass::SPIClass__sub_object(XMC_SPI*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hw_spi.o(i._ZN8SPIClassC1EP7XMC_SPI), UNUSED)

<P><STRONG><a name="[18a]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d9]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[142]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::terminalCommandHandler()
</UL>

<P><STRONG><a name="[1da]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1db]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[198]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[ac]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[18c]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[195]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[9c]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[18f]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[18d]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[193]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[190]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[194]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1dc]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1dd]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1de]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[18e]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[eb]"></a>b_UidSearch_GetDIE0Info</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sls10ere_swi_bif.o(i.b_UidSearch_GetDIE0Info))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[ec]"></a>b_UidSearch_GetDIE1Info</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sls10ere_swi_bif.o(i.b_UidSearch_GetDIE1Info))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[e5]"></a>b_UidSearch_GetDipDoneBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sls10ere_swi_bif.o(i.b_UidSearch_GetDipDoneBit))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[e7]"></a>b_UidSearch_SetDIE0Info</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sls10ere_swi_bif.o(i.b_UidSearch_SetDIE0Info))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[e8]"></a>b_UidSearch_SetDIE1Info</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sls10ere_swi_bif.o(i.b_UidSearch_SetDIE1Info))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[e9]"></a>b_UidSearch_SetDipDoneBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sls10ere_swi_bif.o(i.b_UidSearch_SetDipDoneBit))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[ea]"></a>b_pop</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sls10ere_swi_bif.o(i.b_pop))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[e6]"></a>b_push</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sls10ere_swi_bif.o(i.b_push))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[ef]"></a>board_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, board.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = board_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFHALSetTauSWI_BIF
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Test_Init
</UL>

<P><STRONG><a name="[14f]"></a>digitalWrite</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, wiring_digital.o(i.digitalWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = digitalWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::writeByteSpi(unsigned char, unsigned char, unsigned char)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readBlockSPI(unsigned char, unsigned char, unsigned char*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::readByteSPI(unsigned char)
</UL>

<P><STRONG><a name="[82]"></a>dwordvec_163_copy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sls10ere_math.o(i.dwordvec_163_copy))
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[88]"></a>dwordvec_193_copy</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sls10ere_math.o(i.dwordvec_193_copy))
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[1ac]"></a>dwordvec_add</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, sls10ere_math.o(i.dwordvec_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dwordvec_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_2_power
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfp_divide
</UL>

<P><STRONG><a name="[b3]"></a>dwordvec_cmp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sls10ere_math.o(i.dwordvec_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dwordvec_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfp_divide
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2n_divide
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
</UL>

<P><STRONG><a name="[b2]"></a>dwordvec_iszero</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, sls10ere_math.o(i.dwordvec_iszero))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfp_divide
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2n_divide
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_on_curve
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_mul_projective
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_add_point_x
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_mac
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
</UL>

<P><STRONG><a name="[7f]"></a>dwordvec_l_shift_163</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, sls10ere_math.o(i.dwordvec_l_shift_163))
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[85]"></a>dwordvec_l_shift_193</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sls10ere_math.o(i.dwordvec_l_shift_193))
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[b5]"></a>dwordvec_sub</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, sls10ere_math.o(i.dwordvec_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dwordvec_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfp_divide
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
</UL>

<P><STRONG><a name="[1aa]"></a>dwordvec_swap</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sls10ere_math.o(i.dwordvec_swap))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfp_divide
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2n_divide
</UL>

<P><STRONG><a name="[b8]"></a>ecc_add_point_x</STRONG> (Thumb, 376 bytes, Stack size 176 bytes, sls10ere_math.o(i.ecc_add_point_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ecc_add_point_x &rArr; gf2n_divide &rArr; remove_x_power
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2n_divide
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_iszero
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
</UL>

<P><STRONG><a name="[b1]"></a>ecc_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sls10ere_math.o(i.ecc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ecc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2n_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_checkvalue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_challenge
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
</UL>

<P><STRONG><a name="[b7]"></a>ecc_mul_projective</STRONG> (Thumb, 312 bytes, Stack size 256 bytes, sls10ere_math.o(i.ecc_mul_projective))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = ecc_mul_projective &rArr; mont_ecc_mul &rArr; mont_ecc_add
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_ecc_mul
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_iszero
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
</UL>

<P><STRONG><a name="[b4]"></a>ecc_point_on_curve</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, sls10ere_math.o(i.ecc_point_on_curve))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ecc_point_on_curve
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_iszero
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
</UL>

<P><STRONG><a name="[192]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[7d]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cppforxmc4700.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[f4]"></a>generate_challenge</STRONG> (Thumb, 48 bytes, Stack size 136 bytes, sls10ere_math.o(i.generate_challenge))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = generate_challenge &rArr; mont_ecc_mul &rArr; mont_ecc_add
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_ecc_mul
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2n_divide
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_generate_challenge
</UL>

<P><STRONG><a name="[f5]"></a>generate_checkvalue</STRONG> (Thumb, 48 bytes, Stack size 144 bytes, sls10ere_math.o(i.generate_checkvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = generate_checkvalue &rArr; mont_ecc_mul &rArr; mont_ecc_add
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_ecc_mul
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2n_divide
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_generate_checkvalue
</UL>

<P><STRONG><a name="[c2]"></a>get_pin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, board.o(i.get_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_GetInput
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP1
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP0
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_EINT
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReceiveWord
</UL>

<P><STRONG><a name="[83]"></a>gf2_163_add</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sls10ere_math.o(i.gf2_163_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gf2_163_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[84]"></a>gf2_163_mul</STRONG> (Thumb, 174 bytes, Stack size 528 bytes, sls10ere_math.o(i.gf2_163_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = gf2_163_mul &rArr; gf2_163_reduction
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precompute
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_163_sum
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_163_reduction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[1a7]"></a>gf2_163_reduction</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, sls10ere_math.o(i.gf2_163_reduction))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gf2_163_reduction
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_163_square
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_163_mul
</UL>

<P><STRONG><a name="[81]"></a>gf2_163_square</STRONG> (Thumb, 262 bytes, Stack size 68 bytes, sls10ere_math.o(i.gf2_163_square))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gf2_163_square &rArr; gf2_163_reduction
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_163_reduction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[80]"></a>gf2_163_sum</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sls10ere_math.o(i.gf2_163_sum))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_163_mul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[89]"></a>gf2_193_add</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sls10ere_math.o(i.gf2_193_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gf2_193_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[8a]"></a>gf2_193_mul</STRONG> (Thumb, 174 bytes, Stack size 528 bytes, sls10ere_math.o(i.gf2_193_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = gf2_193_mul &rArr; gf2_193_reduction
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precompute
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_193_sum
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_193_reduction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[1a8]"></a>gf2_193_reduction</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, sls10ere_math.o(i.gf2_193_reduction))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gf2_193_reduction
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_193_square
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_193_mul
</UL>

<P><STRONG><a name="[87]"></a>gf2_193_square</STRONG> (Thumb, 308 bytes, Stack size 68 bytes, sls10ere_math.o(i.gf2_193_square))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gf2_193_square &rArr; gf2_193_reduction
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_193_reduction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[86]"></a>gf2_193_sum</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, sls10ere_math.o(i.gf2_193_sum))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_193_mul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_math.o(i.gf2n_init)
</UL>
<P><STRONG><a name="[1a2]"></a>gf2n_divide</STRONG> (Thumb, 146 bytes, Stack size 104 bytes, sls10ere_math.o(i.gf2n_divide))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gf2n_divide &rArr; remove_x_power
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_x_power
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_swap
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_iszero
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_add_point_x
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_checkvalue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_challenge
</UL>

<P><STRONG><a name="[1a3]"></a>gf2n_init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, sls10ere_math.o(i.gf2n_init))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_mac
</UL>

<P><STRONG><a name="[b6]"></a>gfp_divide</STRONG> (Thumb, 148 bytes, Stack size 104 bytes, sls10ere_math.o(i.gfp_divide))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gfp_divide &rArr; remove_2_power &rArr; dwordvec_add
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_2_power
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_swap
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_sub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_iszero
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_cmp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_add
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
</UL>

<P><STRONG><a name="[1b8]"></a>mac_algorithm_80</STRONG> (Thumb, 636 bytes, Stack size 80 bytes, sls10ere_math.o(i.mac_algorithm_80))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mac_algorithm_80
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_mac
</UL>

<P><STRONG><a name="[74]"></a>main</STRONG> (Thumb, 424 bytes, Stack size 48 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = main &rArr; Dps310::begin(TwoWire&) &rArr; Dps310::begin(TwoWire&, unsigned char) &rArr; Dps310::init() &rArr; Dps310::correctTemp() &rArr; Dps310::measureTempOnce(int&) &rArr; Dps310::measureTempOnce(int&, unsigned char) &rArr; Dps310::startMeasureTempOnce(unsigned char) &rArr; Dps310::configTemp(unsigned char, unsigned char) &rArr;  Dps310::configTemp(unsigned char, unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::begin(TwoWire&)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::measurePressureOnce(int&, unsigned char)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send2stm(unsigned char)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms(unsigned)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystickConfig()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetMode
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Test_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Run_Test
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baro_test()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT*, unsigned char)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1af]"></a>mont_ecc_add</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, sls10ere_math.o(i.mont_ecc_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mont_ecc_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_ecc_mul
</UL>

<P><STRONG><a name="[1b0]"></a>mont_ecc_double</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, sls10ere_math.o(i.mont_ecc_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mont_ecc_double
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_ecc_mul
</UL>

<P><STRONG><a name="[1a4]"></a>mont_ecc_mul</STRONG> (Thumb, 380 bytes, Stack size 104 bytes, sls10ere_math.o(i.mont_ecc_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mont_ecc_mul &rArr; mont_ecc_add
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_ecc_double
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mont_ecc_add
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_mul_projective
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_checkvalue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_challenge
</UL>

<P><STRONG><a name="[1a6]"></a>precompute</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, sls10ere_math.o(i.precompute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = precompute
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_193_mul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2_163_mul
</UL>

<P><STRONG><a name="[1b1]"></a>r_shift</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, sls10ere_math.o(i.r_shift))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_x_power
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_2_power
</UL>

<P><STRONG><a name="[1ab]"></a>remove_2_power</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, sls10ere_math.o(i.remove_2_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = remove_2_power &rArr; dwordvec_add
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_shift
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_add
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gfp_divide
</UL>

<P><STRONG><a name="[1a9]"></a>remove_x_power</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sls10ere_math.o(i.remove_x_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = remove_x_power
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2n_divide
</UL>

<P><STRONG><a name="[c6]"></a>set_pin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, board.o(i.set_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetOutputLow
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetOutputHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_WakeUpFromPWDN
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_HardRST
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_Abort_EINT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>

<P><STRONG><a name="[c5]"></a>set_pin_dir</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, board.o(i.set_pin_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_WakeUpFromPWDN
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_HardRST
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_Abort_EINT
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>

<P><STRONG><a name="[f1]"></a>sha256</STRONG> (Thumb, 38 bytes, Stack size 120 bytes, sls10ere_math.o(i.sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = sha256 &rArr; sha256_update &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_authenticate
</UL>

<P><STRONG><a name="[1b7]"></a>sha256_compress</STRONG> (Thumb, 578 bytes, Stack size 112 bytes, sls10ere_math.o(i.sha256_compress))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sha256_compress
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
</UL>

<P><STRONG><a name="[1b6]"></a>sha256_final</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, sls10ere_math.o(i.sha256_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sha256_final &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_compress
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256
</UL>

<P><STRONG><a name="[1b4]"></a>sha256_init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sls10ere_math.o(i.sha256_init))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256
</UL>

<P><STRONG><a name="[1b5]"></a>sha256_update</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, sls10ere_math.o(i.sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = sha256_update &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_compress
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256
</UL>

<P><STRONG><a name="[191]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[e2]"></a>test_fail</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, board.o(i.test_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = test_fail &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetMode
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetOutputLow
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetOutputHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Test_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Run_Test
</UL>

<P><STRONG><a name="[e1]"></a>test_output</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, board.o(i.test_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = test_output
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Run_Test
</UL>

<P><STRONG><a name="[e3]"></a>test_pass</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, board.o(i.test_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = test_pass &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetMode
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetOutputHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Run_Test
</UL>

<P><STRONG><a name="[f0]"></a>timing_init</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, board.o(i.timing_init))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Test_Init
</UL>

<P><STRONG><a name="[ed]"></a>ub_SizeOfStack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sls10ere_swi_bif.o(i.ub_SizeOfStack))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_SWI_BIF_search_ids
</UL>

<P><STRONG><a name="[cb]"></a>udelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, board.o(i.udelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_Test_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_Abort_EINT
</UL>

<P><STRONG><a name="[f2]"></a>verify_mac</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, sls10ere_math.o(i.verify_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = verify_mac &rArr; mac_algorithm_80
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_algorithm_80
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf2n_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwordvec_iszero
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_mac_verify
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_authenticate
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1ae]"></a>XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT*, unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i._Z22XMC_GPIO_SetOutputHighP13XMC_GPIO_PORTh))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>__sti___8_Main_cpp_66946e4d</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, main.o(i.__sti___8_Main_cpp_66946e4d))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __sti___8_Main_cpp_66946e4d &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dps310::Dps310()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[139]"></a>__NVIC_EnableIRQ(IRQn_Type)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bspusart.o(i._Z16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GROUND_UART_Config()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADAR_UART_Config()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTxNVIC_Config()
</UL>

<P><STRONG><a name="[134]"></a>XMC_UART_CH_Start(XMC_USIC_CH*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bspusart.o(i._Z17XMC_UART_CH_StartP11XMC_USIC_CH))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GROUND_UART_Config()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADAR_UART_Config()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_UART_Config()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_UART_Config()
</UL>

<P><STRONG><a name="[138]"></a>__NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bspusart.o(i._Z18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GROUND_UART_Config()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADAR_UART_Config()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTxNVIC_Config()
</UL>

<P><STRONG><a name="[136]"></a>XMC_USIC_CH_EnableEvent(XMC_USIC_CH*, unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bspusart.o(i._Z23XMC_USIC_CH_EnableEventP11XMC_USIC_CHj))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GROUND_UART_Config()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADAR_UART_Config()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTxNVIC_Config()
</UL>

<P><STRONG><a name="[133]"></a>XMC_UART_CH_SetInputSource(XMC_USIC_CH*, XMC_UART_CH_INPUT, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bspusart.o(i._Z26XMC_UART_CH_SetInputSourceP11XMC_USIC_CH17XMC_UART_CH_INPUTh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_UART_CH_SetInputSource(XMC_USIC_CH*, XMC_UART_CH_INPUT, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GROUND_UART_Config()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADAR_UART_Config()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_UART_Config()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_UART_Config()
</UL>

<P><STRONG><a name="[8f]"></a>__sti___11_Receive_cpp_66f2438e</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, receive.o(i.__sti___11_Receive_cpp_66f2438e))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___11_Receive_cpp_66f2438e
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalCommand::TerminalCommand()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> receive.o(.init_array)
</UL>
<P><STRONG><a name="[17e]"></a>XMC_I2C_CH_Start(XMC_USIC_CH*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wire.o(i._Z16XMC_I2C_CH_StartP11XMC_USIC_CH))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
</UL>

<P><STRONG><a name="[17d]"></a>__NVIC_EnableIRQ(IRQn_Type)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wire.o(i._Z16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
</UL>

<P><STRONG><a name="[177]"></a>__NVIC_DisableIRQ(IRQn_Type)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, wire.o(i._Z17__NVIC_DisableIRQ9IRQn_Type))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::end()
</UL>

<P><STRONG><a name="[17c]"></a>__NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wire.o(i._Z18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
</UL>

<P><STRONG><a name="[16c]"></a>XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wire.o(i._Z24XMC_I2C_CH_GetStatusFlagP11XMC_USIC_CH))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(unsigned char)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::ProtocolHandler()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[16d]"></a>XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH*, unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wire.o(i._Z26XMC_I2C_CH_ClearStatusFlagP11XMC_USIC_CHj))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::flush()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(unsigned char)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::ProtocolHandler()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[176]"></a>XMC_USIC_CH_SetInputSource(XMC_USIC_CH*, XMC_USIC_CH_INPUT, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wire.o(i._Z26XMC_USIC_CH_SetInputSourceP11XMC_USIC_CH17XMC_USIC_CH_INPUTh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_USIC_CH_SetInputSource(XMC_USIC_CH*, XMC_USIC_CH_INPUT, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::end()
</UL>

<P><STRONG><a name="[16f]"></a>XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wire.o(i._Z35XMC_USIC_CH_GetTransmitBufferStatusP11XMC_USIC_CH))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(unsigned char)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(unsigned char)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[170]"></a>XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH*, XMC_USIC_CH_TBUF_STATUS_SET)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wire.o(i._Z35XMC_USIC_CH_SetTransmitBufferStatusP11XMC_USIC_CH27XMC_USIC_CH_TBUF_STATUS_SET))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(unsigned char)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::flush()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::ProtocolHandler()
</UL>

<P><STRONG><a name="[90]"></a>__sti___8_Wire_cpp_1426899b</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wire.o(i.__sti___8_Wire_cpp_1426899b))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___8_Wire_cpp_1426899b &rArr; TwoWire::TwoWire()
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::TwoWire()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.init_array)
</UL>
<P><STRONG><a name="[189]"></a>XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH*, unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_spi.o(i._Z26XMC_SPI_CH_ClearStatusFlagP11XMC_USIC_CHj))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char)
</UL>

<P><STRONG><a name="[186]"></a>XMC_USIC_CH_SetInputSource(XMC_USIC_CH*, XMC_USIC_CH_INPUT, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hw_spi.o(i._Z26XMC_USIC_CH_SetInputSourceP11XMC_USIC_CH17XMC_USIC_CH_INPUTh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_USIC_CH_SetInputSource(XMC_USIC_CH*, XMC_USIC_CH_INPUT, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::end()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::init()
</UL>

<P><STRONG><a name="[182]"></a>XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH*, XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL, XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_spi.o(i._Z36XMC_SPI_CH_ConfigureShiftClockOutputP11XMC_USIC_CH40XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL33XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setDataMode(unsigned char)
</UL>

<P><STRONG><a name="[91]"></a>__sti___10_HW_SPI_cpp_SPI</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hw_spi.o(i.__sti___10_HW_SPI_cpp_SPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___10_HW_SPI_cpp_SPI
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::SPIClass(XMC_SPI*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hw_spi.o(.init_array)
</UL>
<P><STRONG><a name="[12f]"></a>__NVIC_EnableIRQ(IRQn_Type)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timer.o(i._Z16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
</UL>

<P><STRONG><a name="[12e]"></a>__NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(i._Z18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystickConfig()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
</UL>

<P><STRONG><a name="[130]"></a>XMC_CCU4_EnableClock(CCU4_GLOBAL_TypeDef*, unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i._Z20XMC_CCU4_EnableClockP19CCU4_GLOBAL_TypeDefh))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
</UL>

<P><STRONG><a name="[126]"></a>XMC_CCU4_StartPrescaler(CCU4_GLOBAL_TypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i._Z23XMC_CCU4_StartPrescalerP19CCU4_GLOBAL_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
</UL>

<P><STRONG><a name="[12c]"></a>XMC_CCU4_SLICE_EnableEvent(CCU4_CC4_TypeDef*, XMC_CCU4_SLICE_IRQ_ID)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i._Z26XMC_CCU4_SLICE_EnableEventP16CCU4_CC4_TypeDef21XMC_CCU4_SLICE_IRQ_ID))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
</UL>

<P><STRONG><a name="[12b]"></a>XMC_CCU4_EnableShadowTransfer(CCU4_GLOBAL_TypeDef*, unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i._Z29XMC_CCU4_EnableShadowTransferP19CCU4_GLOBAL_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
</UL>

<P><STRONG><a name="[12a]"></a>XMC_CCU4_SLICE_SetTimerPeriodMatch(CCU4_CC4_TypeDef*, unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i._Z34XMC_CCU4_SLICE_SetTimerPeriodMatchP16CCU4_CC4_TypeDeft))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
</UL>

<P><STRONG><a name="[129]"></a>XMC_CCU4_SLICE_SetTimerCompareMatch(CCU4_CC4_TypeDef*, unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i._Z35XMC_CCU4_SLICE_SetTimerCompareMatchP16CCU4_CC4_TypeDeft))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Config()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Config()
</UL>

<P><STRONG><a name="[1a5]"></a>XMC_GPIO_GetInput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board.o(i.XMC_GPIO_GetInput))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
</UL>

<P><STRONG><a name="[1b2]"></a>XMC_GPIO_SetOutputHigh</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board.o(i.XMC_GPIO_SetOutputHigh))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_pass
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fail
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin
</UL>

<P><STRONG><a name="[1b3]"></a>XMC_GPIO_SetOutputLow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board.o(i.XMC_GPIO_SetOutputLow))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fail
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin
</UL>

<P><STRONG><a name="[7b]"></a>Sls10ere_authenticate</STRONG> (Thumb, 172 bytes, Stack size 160 bytes, sls10ere_crypto.o(i.Sls10ere_authenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = Sls10ere_authenticate &rArr; ECDSA_verify &rArr; ecc_mul_projective &rArr; mont_ecc_mul &rArr; mont_ecc_add
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_mac
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECDSA_verify
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memset
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
</UL>
<P><STRONG><a name="[79]"></a>Sls10ere_generate_challenge</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sls10ere_crypto.o(i.Sls10ere_generate_challenge))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Sls10ere_generate_challenge &rArr; generate_challenge &rArr; mont_ecc_mul &rArr; mont_ecc_add
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_challenge
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_rand
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
</UL>
<P><STRONG><a name="[7a]"></a>Sls10ere_generate_checkvalue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sls10ere_crypto.o(i.Sls10ere_generate_checkvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Sls10ere_generate_checkvalue &rArr; generate_checkvalue &rArr; mont_ecc_mul &rArr; mont_ecc_add
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_checkvalue
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
</UL>
<P><STRONG><a name="[78]"></a>Sls10ere_initialize_crypto</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sls10ere_crypto.o(i.Sls10ere_initialize_crypto))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sls10ere_initialize_crypto &rArr; Sls10ere_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
</UL>
<P><STRONG><a name="[7c]"></a>Sls10ere_mac_verify</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, sls10ere_crypto.o(i.Sls10ere_mac_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Sls10ere_mac_verify &rArr; verify_mac &rArr; mac_algorithm_80
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_mac
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
</UL>
<P><STRONG><a name="[df]"></a>Sls10ere_memcpy</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sls10ere_crypto.o(i.Sls10ere_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sls10ere_memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_mac_verify
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_initialize_crypto
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_generate_checkvalue
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_generate_challenge
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_authenticate
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_RegisterCrypto
</UL>

<P><STRONG><a name="[de]"></a>Sls10ere_memset</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sls10ere_crypto.o(i.Sls10ere_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sls10ere_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_authenticate
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_RegisterCrypto
</UL>

<P><STRONG><a name="[f3]"></a>Sls10ere_rand</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sls10ere_crypto.o(i.Sls10ere_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sls10ere_rand
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sls10ere_generate_challenge
</UL>

<P><STRONG><a name="[77]"></a>Sls10ere_unregister</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sls10ere_crypto.o(i.Sls10ere_unregister))
<BR>[Address Reference Count : 1]<UL><LI> sls10ere_crypto.o(i.Sls10ere_RegisterCrypto)
</UL>
<P><STRONG><a name="[ba]"></a>SWI_BIFTransCheckBitInversion</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, swi_hal.o(i.SWI_BIFTransCheckBitInversion))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransProcessReceivedWord
</UL>

<P><STRONG><a name="[bb]"></a>SWI_BIFTransCheckParityBit</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, swi_hal.o(i.SWI_BIFTransCheckParityBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SWI_BIFTransCheckParityBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransProcessReceivedWord
</UL>

<P><STRONG><a name="[b9]"></a>SWI_BIFTransProcessReceivedWord</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, swi_hal.o(i.SWI_BIFTransProcessReceivedWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransCheckParityBit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransCheckBitInversion
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReceiveWord
</UL>

<P><STRONG><a name="[be]"></a>SWI_BIFTransReceiveWord</STRONG> (Thumb, 546 bytes, Stack size 112 bytes, swi_hal.o(i.SWI_BIFTransReceiveWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SWI_BIFTransReceiveWord &rArr; SWI_BIFTransProcessReceivedWord &rArr; SWI_BIFTransCheckParityBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransProcessReceivedWord
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadUint16
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadUint8
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadMultUint8
</UL>

<P><STRONG><a name="[bd]"></a>SWI_BIFTransSendWord</STRONG> (Thumb, 630 bytes, Stack size 24 bytes, swi_hal.o(i.SWI_BIFTransSendWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SWI_BIFTransSendWord &rArr; set_pin_dir &rArr; XMC_GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin_dir
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFDelay
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransTreatInvertFlag
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSetParityBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_SDA
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DISS
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP1
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIP0
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIE1
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_DIE0
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_WD
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransWriteUint16
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadUint16
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTrans_EINT
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransWriteUint8
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransWriteMultUint8
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadUint8
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransReadMultUint8
</UL>

<P><STRONG><a name="[c3]"></a>SWI_BIFTransSetParityBits</STRONG> (Thumb, 370 bytes, Stack size 0 bytes, swi_hal.o(i.SWI_BIFTransSetParityBits))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>

<P><STRONG><a name="[c4]"></a>SWI_BIFTransTreatInvertFlag</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, swi_hal.o(i.SWI_BIFTransTreatInvertFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SWI_BIFTransTreatInvertFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_BIFTransSendWord
</UL>

<P><STRONG><a name="[10f]"></a>XMC_I2C_CH_ClearStatusFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xmc_i2c.o(i.XMC_I2C_CH_ClearStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_SlaveTransmit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterTransmit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterStop
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterStart
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterRepeatedStart
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterReceiveNack
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterReceiveAck
</UL>

<P><STRONG><a name="[10e]"></a>XMC_USIC_CH_GetTransmitBufferStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, xmc_i2c.o(i.XMC_USIC_CH_GetTransmitBufferStatus))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_Stop
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_SlaveTransmit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterTransmit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterStop
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterStart
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterRepeatedStart
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterReceiveNack
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_I2C_CH_MasterReceiveAck
</UL>

<P><STRONG><a name="[11c]"></a>XMC_SPI_CH_ClearStatusFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xmc_spi.o(i.XMC_SPI_CH_ClearStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SPI_CH_Transmit
</UL>

<P><STRONG><a name="[fc]"></a>delay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system_xmc4700.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>

<P><STRONG><a name="[19d]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18b]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[19f]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19e]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[199]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
